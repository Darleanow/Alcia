name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install CMake on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get remove -y cmake
          sudo apt-get install -y wget
          wget https://github.com/Kitware/CMake/releases/download/v3.28.0/cmake-3.28.0-linux-x86_64.sh
          sudo mkdir -p /opt/cmake
          sudo sh cmake-3.28.0-linux-x86_64.sh --prefix=/opt/cmake --skip-license
          if [ -f "/usr/local/bin/cmake" ]; then
            sudo rm /usr/local/bin/cmake
          fi
          sudo ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake

      - name: Install CMake on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake

      - name: Install CMake on Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake --installargs '"ADD_CMAKE_TO_PATH=System"'

      - name: Install dependencies on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ ninja-build lcov

      - name: Install dependencies on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install gcc ninja lcov

      - name: Install dependencies on Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install ninja
          choco install mingw

      - name: Configure CMake with Coverage
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -G Ninja -DCOVERAGE=ON

      - name: Build
        run: cmake --build build

      - name: Run Tests
        run: |
          cd build
          ctest --output-on-failure

      - name: Check for .gcda Files
        run: |
          cd build
          find . -name "*.gcda" -print

      - name: List Coverage Files
        run: |
          cd build
          ls -alh

      - name: Generate Coverage Report on Unix
        if: matrix.os != 'windows-latest'
        run: |
          cd build
          lcov --config-file ../.lcovrc --capture --directory . --output-file coverage.info --no-external
          lcov --remove coverage.info '*/_deps/*' '*/googletest/*' '*/usr/*' --output-file coverage.info
          lcov --extract coverage.info '*/src/**' --output-file coverage.info
          lcov --list coverage.info

      - name: Upload Coverage to Codecov
        if: matrix.os != 'windows-latest'
        uses: codecov/codecov-action@v3
        with:
          files: build/coverage.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
